name: Publish package to GitHub Packages

on:
  push:
    branches:
      - main

jobs:
  publish:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4

      # Step to get the latest version from GitHub Packages
      - name: Get latest version from GitHub Packages
        id: get_version
        run: |
          response=$(curl -s -H "Authorization: Bearer ${{ secrets.GIT_TOKEN }}" -H "Accept: application/vnd.github.v3+json" "https://api.github.com/user/packages/maven/org.nttdata.front-end-framework/versions")
          latest_version=$(echo $response | jq -r '.[0].name')
          echo "Latest version: $latest_version"
          echo "LATEST_VERSION=$latest_version" >> $GITHUB_ENV

      # Step to generate a new version based on the latest version
      - name: Generate new version
        run: |
          latest_version="${{ env.LATEST_VERSION }}"
          IFS='.' read -r -a version_parts <<< "$latest_version"
          major=${version_parts[0]}
          minor=${version_parts[1]}
          patch=${version_parts[2]}
          
          # Increment logic
          if [ $patch -eq 30 ]; then
            patch=0
            minor=$((minor + 1))
          else
            patch=$((patch + 1))
          fi

          if [ $minor -eq 30 ]; then
            minor=0
            major=$((major + 1))
          fi
          
          new_version="$major.$minor.$patch"
          echo "NEW_VERSION=$new_version" >> $GITHUB_ENV

      # Step to update the version in the pom.xml
      - name: Update POM version
        run: |
          new_version="${{ env.NEW_VERSION }}"
          mvn versions:set -DnewVersion=$new_version

      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Publish package
        run: mvn --batch-mode deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}

      # Step to tag the new version
      - name: Tag the new version
        run: |
          new_version="${{ env.NEW_VERSION }}"
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git tag "v$new_version"
          git push origin "v$new_version"
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
